module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { Start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          function(program) { return program; },
          { type: "any", description: "any character" },
          { type: "other", description: "whitespace" },
          "\t",
          { type: "literal", value: "\t", description: "\"\\t\"" },
          "\x0B",
          { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
          "\f",
          { type: "literal", value: "\f", description: "\"\\f\"" },
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          /^[\n\r]/,
          { type: "class", value: "[\\n\\r]", description: "[\\n\\r]" },
          { type: "other", description: "end of line" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          "\r\n",
          { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
          "\r",
          { type: "literal", value: "\r", description: "\"\\r\"" },
          void 0,
          function(name) { return name; },
          { type: "other", description: "identifier" },
          [],
          /^[a-zA-Z0-9]/,
          { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
          function(first, rest) {
                return {
                  type: "Identifier",
                  name: first + rest.join("")
                };
              },
          /^[a-zA-Z]/,
          { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
          { type: "other", description: "number" },
          function(literal) {
          		return {
          			type: "Literal",
          			value: parseInt(literal.join(""))
          		}	  
              },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          { type: "other", description: "string" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          function(chars) {
                return { type: "Literal", value: chars.join("") };
              },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          function() { return text(); },
          "arba",
          { type: "literal", value: "arba", description: "\"arba\"" },
          "pakartotinis",
          { type: "literal", value: "pakartotinis", description: "\"pakartotinis\"" },
          "jeigu",
          { type: "literal", value: "jeigu", description: "\"jeigu\"" },
          "grazink",
          { type: "literal", value: "grazink", description: "\"grazink\"" },
          "sk",
          { type: "literal", value: "sk", description: "\"sk\"" },
          "tekstas",
          { type: "literal", value: "tekstas", description: "\"tekstas\"" },
          "kol",
          { type: "literal", value: "kol", description: "\"kol\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          function(expression) { return expression; },
          null,
          function(args) {
                return optionalList(extractOptional(args, 0));
              },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(first, rest) {
                return buildList(first, rest, 3);
              },
          function(first, rest) { return buildBinaryExpression(first, rest); },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          /^[+=]/,
          { type: "class", value: "[+=]", description: "[+=]" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          /^[\-=]/,
          { type: "class", value: "[\\-=]", description: "[\\-=]" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "&&",
          { type: "literal", value: "&&", description: "\"&&\"" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          function(left, right) {
                return {
                  type:     "AssignmentExpression",
                  operator: "=",
                  left:     left,
                  right:    right
                };
              },
          function(first, rest) {
                return rest.length > 0
                  ? { type: "SequenceExpression", expressions: buildList(first, rest, 3) }
                  : first;
              },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          function(body) {
                return {
                  type: "BlockStatement",
                  body: optionalList(extractOptional(body, 0))
                };
              },
          function(first, rest) { return buildList(first, rest, 1); },
          function(declarations) {
                return {
                  type:         "VariableDeclaration",
                  declarations: [declarations],
          		kind: "var"
                };
              },
          function(id, init) {
                return {
                  type: "VariableDeclarator",
                  id:   id,
                  init: extractOptional(init, 1)
                };
              },
          function(expression) {
                return {
                  type:       "ExpressionStatement",
                  expression: expression
                };
              },
          function() { return { type: "EmptyStatement" }; },
          function(test, consequent, alternate) {
                return {
                  type:       "IfStatement",
                  test:       test,
                  consequent: consequent,
                  alternate:  alternate
                };
              },
          function(test, consequent) {
                return {
                  type:       "IfStatement",
                  test:       test,
                  consequent: consequent,
                  alternate:  null
                };
              },
          function(test, body) { return { type: "WhileStatement", test: test, body: body }; },
          function() {
                return { type: "ReturnStatement", argument: null };
              },
          function(argument) {
                return { type: "ReturnStatement", argument: argument };
              },
          function(id, params, body) {
                return {
                  type:   "FunctionDeclaration",
                  id:     id,
                  params: optionalList(extractOptional(params, 0)),
                  body:   body
                };
              },
          function(id, params, body) {
                return {
                  type:   "FunctionExpression",
                  id:     extractOptional(id, 0),
                  params: optionalList(extractOptional(params, 0)),
                  body:   body
                };
              },
          function(body) {
                return {
                  type: "BlockStatement",
                  body: optionalList(body)
                };
              },
          function(body) {
                return {
                  type: "Program",
                  body: optionalList(body)
                };
              },
          function(first, rest) {
                return buildList(first, rest, 1);
              }
        ],

        peg$bytecode = [
          peg$decode("!76+<$7Z+2%76+(%4#6!#!!%$##  $\"#  \"#  "),
          peg$decode("-\"\"1!3\""),
          peg$decode("8.$\"\"2$3%*A \".&\"\"2&3'*5 \".(\"\"2(3)*) \".*\"\"2*3+9*\" 3#"),
          peg$decode("0,\"\"1!3-"),
          peg$decode("8./\"\"2/30*5 \".1\"\"2132*) \".3\"\"23349*\" 3."),
          peg$decode("!!87(9*$$\"\" 5\"#  +2$7&+(%4\"66\"! %$\"#  \"#  "),
          peg$decode("8!7'+G$ 809\"\"1!3:,)&09\"\"1!3:\"+)%4\"6;\"\"! %$\"#  \"#  9*\" 37"),
          peg$decode("0<\"\"1!3="),
          peg$decode("70*; \"71*5 \"72*/ \"73*) \"74*# \"75"),
          peg$decode("7**# \"7-"),
          peg$decode("8!7++' 4!6?!! %9*\" 3>"),
          peg$decode(" 87,+&$,#&7,\"\"\"  "),
          peg$decode("0@\"\"1!3A"),
          peg$decode("8!.C\"\"2C3D+J$ 87.,#&7.\"+8%.C\"\"2C3D+(%4#6E#!!%$##  $\"#  \"#  *[ \"!.F\"\"2F3G+J$ 87/,#&7/\"+8%.F\"\"2F3G+(%4#6E#!!%$##  $\"#  \"#  9*\" 3B"),
          peg$decode("!!8.C\"\"2C3D*# \"7#9*$$\"\" 5\"#  +1$7!+'%4\"6H\" %$\"#  \"#  "),
          peg$decode("!!8.F\"\"2F3G*# \"7#9*$$\"\" 5\"#  +1$7!+'%4\"6H\" %$\"#  \"#  "),
          peg$decode("!.I\"\"2I3J+;$!87'9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  "),
          peg$decode("!.K\"\"2K3L+;$!87'9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  "),
          peg$decode("!.M\"\"2M3N+;$!87'9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  "),
          peg$decode("!.O\"\"2O3P+;$!87'9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  "),
          peg$decode(".Q\"\"2Q3R*L \"!.S\"\"2S3T+;$!87'9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  "),
          peg$decode("!.U\"\"2U3V+;$!87'9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  "),
          peg$decode(" 87\"*# \"7$,)&7\"*# \"7$\""),
          peg$decode(" 87\",#&7\"\""),
          peg$decode("!76+3$.W\"\"2W3X+#%'\"%$\"#  \"#  *\x82 \"!77+-$7$+#%'\"%$\"#  \"#  *g \"!77+A$!8.Y\"\"2Y3Z9+$$\"# 5\"\"  +#%'\"%$\"#  \"#  *8 \"!76+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("!8-\"\"1!3\"9*$$\"\" 5\"#  "),
          peg$decode("7%*m \"7)*g \"!.[\"\"2[3\\+V$76+L%7J+B%76+8%.]\"\"2]3^+(%4%6_%!\"%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.[\"\"2[3\\+g$76+]%!7<+-$76+#%'\"%$\"#  \"#  *# \" `+8%.]\"\"2]3^+(%4$6a$!!%$$#  $##  $\"#  \"#  "),
          peg$decode("!7I+\x99$ 8!76+G$.b\"\"2b3c+7%76+-%7I+#%'$%$$#  $##  $\"#  \"#  ,R&!76+G$.b\"\"2b3c+7%76+-%7I+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6d\"\"! %$\"#  \"#  "),
          peg$decode("!7:+\x8D$ 8!76+A$7>+7%76+-%7:+#%'$%$$#  $##  $\"#  \"#  ,L&!76+A$7>+7%76+-%7:+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6e\"\"! %$\"#  \"#  "),
          peg$decode("!!.f\"\"2f3g+A$!8.h\"\"2h3i9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  +! (%*X \"!!.j\"\"2j3k+A$!8.h\"\"2h3i9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  +! (%"),
          peg$decode("!7=+\x8D$ 8!76+A$7@+7%76+-%7=+#%'$%$$#  $##  $\"#  \"#  ,L&!76+A$7@+7%76+-%7=+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6e\"\"! %$\"#  \"#  "),
          peg$decode("!!.l\"\"2l3m+A$!80n\"\"1!3o9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  +! (%*X \"!!.p\"\"2p3q+A$!80r\"\"1!3s9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  +! (%"),
          peg$decode("!7?+\x8D$ 8!76+A$7B+7%76+-%7?+#%'$%$$#  $##  $\"#  \"#  ,L&!76+A$7B+7%76+-%7?+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6e\"\"! %$\"#  \"#  "),
          peg$decode(".t\"\"2t3u*\x9F \".v\"\"2v3w*\x93 \"!!.x\"\"2x3y+A$!8.x\"\"2x3y9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  +! (%*X \"!!.z\"\"2z3{+A$!8.z\"\"2z3{9*$$\"\" 5\"#  +#%'\"%$\"#  \"#  +! (%"),
          peg$decode("!7A+\x8D$ 8!76+A$7D+7%76+-%7A+#%'$%$$#  $##  $\"#  \"#  ,L&!76+A$7D+7%76+-%7A+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6e\"\"! %$\"#  \"#  "),
          peg$decode(".|\"\"2|3}*) \".~\"\"2~3"),
          peg$decode("!7C+\x8D$ 8!76+A$7F+7%76+-%7C+#%'$%$$#  $##  $\"#  \"#  ,L&!76+A$7F+7%76+-%7C+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6e\"\"! %$\"#  \"#  "),
          peg$decode(".\x80\"\"2\x803\x81"),
          peg$decode("!7E+\x8D$ 8!76+A$7H+7%76+-%7E+#%'$%$$#  $##  $\"#  \"#  ,L&!76+A$7H+7%76+-%7E+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6e\"\"! %$\"#  \"#  "),
          peg$decode(".\x82\"\"2\x823\x83"),
          peg$decode("!7:+u$76+k%.h\"\"2h3i+[%!8.h\"\"2h3i9*$$\"\" 5\"#  +=%76+3%7I+)%4&6\x84&\"% %$&#  $%#  $$#  $##  $\"#  \"#  *# \"7G"),
          peg$decode("!7I+\x99$ 8!76+G$.b\"\"2b3c+7%76+-%7I+#%'$%$$#  $##  $\"#  \"#  ,R&!76+G$.b\"\"2b3c+7%76+-%7I+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6\x85\"\"! %$\"#  \"#  "),
          peg$decode("7L*A \"7N*; \"7R*5 \"7Q*/ \"7S*) \"7T*# \"7U"),
          peg$decode("!.\x86\"\"2\x863\x87+g$76+]%!7M+-$76+#%'\"%$\"#  \"#  *# \" `+8%.Y\"\"2Y3Z+(%4$6\x88$!!%$$#  $##  $\"#  \"#  "),
          peg$decode("!7K+e$ 8!76+-$7K+#%'\"%$\"#  \"#  ,8&!76+-$7K+#%'\"%$\"#  \"#  \"+)%4\"6\x89\"\"! %$\"#  \"#  "),
          peg$decode("!74+<$76+2%7O+(%4#6\x8A#! %$##  $\"#  \"#  "),
          peg$decode("!7%+N$!76+-$7P+#%'\"%$\"#  \"#  *# \" `+)%4\"6\x8B\"\"! %$\"#  \"#  "),
          peg$decode("!.h\"\"2h3i+Z$!8.h\"\"2h3i9*$$\"\" 5\"#  +<%76+2%7I+(%4$6_$! %$$#  $##  $\"#  \"#  "),
          peg$decode("!!8.\x86\"\"2\x863\x87*# \"719*$$\"\" 5\"#  +<$7J+2%78+(%4#6\x8C#!!%$##  $\"#  \"#  "),
          peg$decode("!.W\"\"2W3X+& 4!6\x8D! %"),
          peg$decode("!72+\xAE$76+\xA4%.[\"\"2[3\\+\x94%76+\x8A%7J+\x80%76+v%.]\"\"2]3^+f%76+\\%7K+R%76+H%70+>%76+4%7K+*%4-6\x8E-#($ %$-#  $,#  $+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *\x90 \"!72+\x85$76+{%.[\"\"2[3\\+k%76+a%7J+W%76+M%.]\"\"2]3^+=%76+3%7K+)%4)6\x8F)\"$ %$)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!75+\x85$76+{%.[\"\"2[3\\+k%76+a%7J+W%76+M%.]\"\"2]3^+=%76+3%7K+)%4)6\x90)\"$ %$)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!73+1$78+'%4\"6\x91\" %$\"#  \"#  *Q \"!73+F$77+<%7J+2%78+(%4$6\x92$!!%$$#  $##  $\"#  \"#  "),
          peg$decode("!71+\xDF$76+\xD5%7%+\xCB%76+\xC1%.[\"\"2[3\\+\xB1%76+\xA7%!7X+-$76+#%'\"%$\"#  \"#  *# \" `+\x82%.]\"\"2]3^+r%76+h%.\x86\"\"2\x863\x87+X%76+N%7Y+D%76+:%.Y\"\"2Y3Z+*%4.6\x93.#+'\"%$.#  $-#  $,#  $+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!71+\xF0$76+\xE6%!7%+-$76+#%'\"%$\"#  \"#  *# \" `+\xC1%.[\"\"2[3\\+\xB1%76+\xA7%!7X+-$76+#%'\"%$\"#  \"#  *# \" `+\x82%.]\"\"2]3^+r%76+h%.\x86\"\"2\x863\x87+X%76+N%7Y+D%76+:%.Y\"\"2Y3Z+*%4-6\x94-#*'\"%$-#  $,#  $+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7%+\x99$ 8!76+G$.b\"\"2b3c+7%76+-%7%+#%'$%$$#  $##  $\"#  \"#  ,R&!76+G$.b\"\"2b3c+7%76+-%7%+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6d\"\"! %$\"#  \"#  "),
          peg$decode("!7[*# \" `+' 4!6\x95!! %"),
          peg$decode("!7[*# \" `+' 4!6\x96!! %"),
          peg$decode("!7\\+e$ 8!76+-$7\\+#%'\"%$\"#  \"#  ,8&!76+-$7\\+#%'\"%$\"#  \"#  \"+)%4\"6\x97\"\"! %$\"#  \"#  "),
          peg$decode("7K*# \"7V")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


      function extractOptional(optional, index) {
        return optional ? optional[index] : null;
      }

      function extractList(list, index) {
        var result = new Array(list.length), i;

        for (i = 0; i < list.length; i++) {
          result[i] = list[i][index];
        }

        return result;
      }

      function buildList(first, rest, index) {
        return [first].concat(extractList(rest, index));
      }

      function buildTree(first, rest, builder) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = builder(result, rest[i]);
        }

        return result;
      }

      function buildBinaryExpression(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "BinaryExpression",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();